package com.nemezissfpro.ethalmod.objects.blocks;

import javax.annotation.Nullable;

import com.google.common.base.Predicate;
import com.nemezissfpro.ethalmod.Main;
import com.nemezissfpro.ethalmod.init.ModBlocks;
import com.nemezissfpro.ethalmod.init.ModItems;
import com.nemezissfpro.ethalmod.util.interfaces.IMetaName;

import net.minecraft.block.BlockLog;
import net.minecraft.block.SoundType;
import net.minecraft.block.properties.IProperty;
import net.minecraft.block.properties.PropertyEnum;
import net.minecraft.block.state.BlockStateContainer;
import net.minecraft.block.state.IBlockState;
import net.minecraft.creativetab.CreativeTabs;
import net.minecraft.item.Item;
import net.minecraft.item.ItemBlock;
import net.minecraft.item.ItemStack;
import net.minecraft.util.NonNullList;

public class BlockCustomLogs extends BlockLog implements IMetaName
{
	public static final PropertyEnum<BlockCustomPlanks.EnumType> VARIANT = PropertyEnum.<BlockCustomPlanks.EnumType>create("variant", BlockCustomPlanks.EnumType.class, new Predicate<BlockCustomPlanks.EnumType>()
			{
				public boolean apply(@Nullable BlockCustomPlanks.EnumType apply)
				{
					return apply.getMeta() < 2;
				}
			});
	
	public BlockCustomLogs(String name) 
	{
		setUnlocalizedName(name);
		setRegistryName(name);
		setSoundType(SoundType.WOOD);
		setDefaultState(this.blockState.getBaseState().withProperty(VARIANT, BlockCustomPlanks.EnumType.RESIN).withProperty(LOG_AXIS, EnumAxis.Y));
	}
	
	@Override
	public void getSubBlocks(CreativeTabs itemIn, NonNullList<ItemStack> items) 
	{
		for(BlockCustomPlanks.EnumType blockcustomplanks$enumtype : BlockCustomPlanks.EnumType.values())
		{
			items.add(new ItemStack(this, 1, blockcustomplanks$enumtype.getMeta()));
		}
	}
	
	@Override
	public IBlockState getStateFromMeta(int meta) 
	{
		IBlockState state = this.getDefaultState().withProperty(VARIANT, BlockCustomPlanks.EnumType.byMetada((meta & 1) % 2));
		
		switch(meta & 6)
		{
		case 0:
			state = state.withProperty(LOG_AXIS, EnumAxis.Y);
			break;
		case 2:
			state = state.withProperty(LOG_AXIS, EnumAxis.X);
			break;
		case 4:
			state = state.withProperty(LOG_AXIS, EnumAxis.Z);
			break;
		default:
			state = state.withProperty(LOG_AXIS, EnumAxis.NONE);
		}
		return state;
	}
	
	@SuppressWarnings("incomplete-switch")
	@Override
	public int getMetaFromState(IBlockState state) 
	{
		int i =0;
		i = i | ((BlockCustomPlanks.EnumType)state.getValue(VARIANT)).getMeta();
		
		switch((BlockLog.EnumAxis)state.getValue(LOG_AXIS))
		{
		case X:
			i |=2;
			break;
		case Y:
			i |=4;
			break;
		case Z:
			i |=6;
		}
		return i;
	}
	
	@Override
	protected BlockStateContainer createBlockState() 
	{
		return new BlockStateContainer(this, new IProperty[] {VARIANT,LOG_AXIS});
	}
	
	@Override
	protected ItemStack getSilkTouchDrop(IBlockState state) 
	{
		return new ItemStack(Item.getItemFromBlock(this), 1, ((BlockCustomPlanks.EnumType)state.getValue(VARIANT)).getMeta());
	}
	
	@Override
	public int damageDropped(IBlockState state) 
	{
		return((BlockCustomPlanks.EnumType)state.getValue(VARIANT)).getMeta();
	}
	
	@Override
	public String getSpecialName(ItemStack stack) 
	{
		return BlockCustomPlanks.EnumType.values()[stack.getCount()].getName();
	}
	
}
